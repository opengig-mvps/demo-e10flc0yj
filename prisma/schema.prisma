
  generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
  }
  
  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }
        
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  password      String?
  username      String          @unique
  name          String?
  role          String          @default("buyer")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  
  vendorProfile VendorProfile?
  buyerProfile  BuyerProfile?
  listings      Listing[]       @relation("VendorListings")
  payments      Payment[]
  dashboard     BuyerDashboard?
  bookings      Booking[]
  vendorDashboard VendorDashboard?

  @@map("users")
}

model VendorProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  businessName String
  contactInfo  String
  logoUrl      String?
  userId       String   @unique @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])

  @@map("vendor_profiles")
}

model BuyerProfile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentDetails Json?
  userId       String   @unique @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])

  @@map("buyer_profiles")
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  availability Json
  amenities   Json
  images      Json
  vendorId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  vendor      User     @relation("VendorListings", fields: [vendorId], references: [id])
  bookings    Booking[]

  @@map("listings")
}

model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId   String   @db.ObjectId
  userId      String   @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  paymentId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  listing     Listing  @relation(fields: [listingId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  paymentStatus String
  paymentDate   DateTime @default(now())
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])

  @@map("payments")
}

model VendorDashboard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  totalListings Int     @default(0)
  totalBookings Int     @default(0)
  totalRevenue Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])

  @@map("vendor_dashboards")
}

model BuyerDashboard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  totalBookings Int     @default(0)
  totalSpent  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])

  @@map("buyer_dashboards")
}